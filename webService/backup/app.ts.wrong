/**
 * 应用程序入口文件
 */

import express from 'express';
import helmet from 'helmet';
import cors from 'cors';
import morgan from 'morgan';
import { errorHandler } from './middlewares/error-handler.middleware';
import * as routes from './routes';
import { join } from 'path';
import { setupSwagger } from './swagger';

// 导入模拟数据源路由
import dataSourcesMockRoutes from './routes/data-sources.mock';

/**
 * 创建Express应用程序
 */
export const app = express();

/**
 * 安全中间件
 */
app.use(helmet({
  contentSecurityPolicy: false // 禁用CSP以允许Swagger UI正常工作
}));

/**
 * CORS设置
 */
app.use(cors());

/**
 * 日志中间件
 */
app.use(morgan('dev'));

/**
 * 解析JSON请求体
 */
app.use(express.json({ limit: '50mb' }));

/**
 * 解析URL编码请求体
 */
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

/**
 * 静态文件目录
 */
app.use(express.static(join(__dirname, '../public')));

/**
 * API路由
 */
app.use('/api/auth', routes.authRoutes);
app.use('/api/users', routes.userRoutes);

// 使用模拟数据源路由
app.use('/api/data-sources', dataSourcesMockRoutes);
app.use('/api/datasources', dataSourcesMockRoutes); // 兼容旧路径

app.use('/api/queries', routes.queryRoutes);

/**
 * 查询版本控制路由
 */
app.use('/api', routes.queryVersionRoutes);

/**
 * 查询收藏路由
 */
app.use('/api', routes.queryFavoriteRoutes);

/**
 * 配置Swagger文档
 */
setupSwagger(app);

/**
 * 健康检查
 */
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'OK', timestamp: new Date().toISOString() });
});

/**
 * 全局错误处理中间件
 */
app.use(errorHandler);

/**
 * 导出Express应用
 */
export default app;
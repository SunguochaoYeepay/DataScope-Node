generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mysql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model DataSource {
  id                String       @id @default(uuid())
  name              String
  description       String?      @db.Text
  type              String
  host              String
  port              Int
  databaseName      String
  username          String
  passwordEncrypted String
  passwordSalt      String
  connectionParams  Json?
  status            String
  syncFrequency     String?
  lastSyncTime      DateTime?
  nonce             Int          @default(0)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  createdBy         String       @default("system")
  updatedBy         String       @default("system")
  active            Boolean      @default(true)
  queries           Query[]
  savedQueries      SavedQuery[]
  schemas           Schema[]

  @@map("tbl_data_source")
}

model Schema {
  id           String     @id @default(uuid())
  dataSourceId String
  name         String
  description  String?    @db.Text
  nonce        Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  createdBy    String     @default("system")
  updatedBy    String     @default("system")
  dataSource   DataSource @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)
  tables       Table[]

  @@index([dataSourceId], map: "tbl_schema_dataSourceId_fkey")
  @@map("tbl_schema")
}

model Table {
  id                  String              @id @default(uuid())
  schemaId            String
  name                String
  description         String?             @db.Text
  type                String              @default("TABLE")
  nonce               Int                 @default(0)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  createdBy           String              @default("system")
  updatedBy           String              @default("system")
  columns             Column[]
  schema              Schema              @relation(fields: [schemaId], references: [id], onDelete: Cascade)
  sourceRelationships TableRelationship[] @relation("SourceTable")
  targetRelationships TableRelationship[] @relation("TargetTable")

  @@index([schemaId], map: "tbl_table_schemaId_fkey")
  @@map("tbl_table")
}

model Column {
  id                  String               @id @default(uuid())
  tableId             String
  name                String
  dataType            String
  length              Int?
  precision           Int?
  scale               Int?
  nullable            Boolean              @default(true)
  isPrimaryKey        Boolean              @default(false)
  isForeignKey        Boolean              @default(false)
  defaultValue        String?
  description         String?              @db.Text
  nonce               Int                  @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  createdBy           String               @default("system")
  updatedBy           String               @default("system")
  table               Table                @relation(fields: [tableId], references: [id], onDelete: Cascade)
  sourceRelationships ColumnRelationship[] @relation("SourceColumn")
  targetRelationships ColumnRelationship[] @relation("TargetColumn")

  @@index([tableId], map: "tbl_column_tableId_fkey")
  @@map("tbl_column")
}

model TableRelationship {
  id                  String               @id @default(uuid())
  sourceTableId       String
  targetTableId       String
  type                String
  confidence          Float                @default(1)
  isAutoDetected      Boolean              @default(false)
  nonce               Int                  @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  createdBy           String               @default("system")
  updatedBy           String               @default("system")
  columnRelationships ColumnRelationship[]
  sourceTable         Table                @relation("SourceTable", fields: [sourceTableId], references: [id], onDelete: Cascade)
  targetTable         Table                @relation("TargetTable", fields: [targetTableId], references: [id], onDelete: Cascade)

  @@index([sourceTableId], map: "tbl_table_relationship_sourceTableId_fkey")
  @@index([targetTableId], map: "tbl_table_relationship_targetTableId_fkey")
  @@map("tbl_table_relationship")
}

model ColumnRelationship {
  id                  String            @id @default(uuid())
  tableRelationshipId String
  sourceColumnId      String
  targetColumnId      String
  nonce               Int               @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  createdBy           String            @default("system")
  updatedBy           String            @default("system")
  sourceColumn        Column            @relation("SourceColumn", fields: [sourceColumnId], references: [id], onDelete: Cascade)
  tableRelationship   TableRelationship @relation(fields: [tableRelationshipId], references: [id], onDelete: Cascade)
  targetColumn        Column            @relation("TargetColumn", fields: [targetColumnId], references: [id], onDelete: Cascade)

  @@index([sourceColumnId], map: "tbl_column_relationship_sourceColumnId_fkey")
  @@index([tableRelationshipId], map: "tbl_column_relationship_tableRelationshipId_fkey")
  @@index([targetColumnId], map: "tbl_column_relationship_targetColumnId_fkey")
  @@map("tbl_column_relationship")
}

model Query {
  id                 String          @id @default(uuid())
  name               String
  description        String?         @db.Text
  dataSourceId       String
  sqlContent         String          @db.Text
  status             String          @default("DRAFT")
  queryType          String          @default("SQL")
  isFavorite         Boolean         @default(false)
  executionCount     Int             @default(0)
  lastExecutedAt     DateTime?
  tags               String?
  currentVersionId   String?         // 当前版本ID
  versionsCount      Int             @default(0) // 版本数量
  nonce              Int             @default(0)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  createdBy          String          @default("system")
  updatedBy          String          @default("system")
  tbl_display_config DisplayConfig[]
  integrations       Integration[]
  dataSource         DataSource      @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)
  executions         QueryHistory[]
  queryPlans         QueryPlan[]
  versions           QueryVersion[]  // 关联查询版本

  @@index([dataSourceId], map: "tbl_query_dataSourceId_fkey")
  @@map("tbl_query")
}

model QueryHistory {
  id           String    @id @default(uuid())
  queryId      String?
  dataSourceId String
  sqlContent   String    @db.Text
  status       String
  startTime    DateTime
  endTime      DateTime?
  duration     Int?
  rowCount     Int?
  errorMessage String?   @db.Text
  createdAt    DateTime  @default(now())
  createdBy    String    @default("system")
  query        Query?    @relation(fields: [queryId], references: [id])

  @@index([queryId], map: "tbl_query_history_queryId_fkey")
  @@map("tbl_query_history")
}

model DisplayConfig {
  id          String   @id @default(uuid())
  queryId     String
  displayType String
  chartType   String?
  title       String?
  description String?  @db.Text
  config      Json
  isDefault   Boolean  @default(false)
  nonce       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   @default("system")
  updatedBy   String   @default("system")
  tbl_query   Query    @relation(fields: [queryId], references: [id], onDelete: Cascade)

  @@index([queryId], map: "tbl_display_config_queryId_fkey")
  @@map("tbl_display_config")
}

model MetadataSyncHistory {
  id                 String    @id @default(uuid())
  dataSourceId       String
  status             String
  startTime          DateTime
  endTime            DateTime?
  duration           Int?
  syncType           String
  tablesCount        Int?
  viewsCount         Int?
  relationshipsCount Int?
  errorMessage       String?   @db.Text
  createdAt          DateTime  @default(now())
  createdBy          String    @default("system")

  @@map("tbl_metadata_sync_history")
}

model QueryPlan {
  id                                                                          String                @id @default(uuid())
  queryId                                                                     String?
  dataSourceId                                                                String
  name                                                                        String?
  sql                                                                         String                @db.Text
  planData                                                                    String                @db.Text
  estimatedCost                                                               Float?
  optimizationTips                                                            String?               @db.Text
  isAnalyzed                                                                  Boolean               @default(false)
  createdAt                                                                   DateTime              @default(now())
  updatedAt                                                                   DateTime              @updatedAt
  createdBy                                                                   String                @default("system")
  query                                                                       Query?                @relation(fields: [queryId], references: [id])
  tbl_query_plan_comparison_tbl_query_plan_comparison_planAIdTotbl_query_plan QueryPlanComparison[] @relation("tbl_query_plan_comparison_planAIdTotbl_query_plan")
  tbl_query_plan_comparison_tbl_query_plan_comparison_planBIdTotbl_query_plan QueryPlanComparison[] @relation("tbl_query_plan_comparison_planBIdTotbl_query_plan")

  @@index([queryId], map: "tbl_query_plan_queryId_fkey")
  @@map("tbl_query_plan")
}

model QueryPlanComparison {
  id                                                               String    @id @default(uuid())
  planAId                                                          String
  planBId                                                          String
  comparisonData                                                   String    @db.Text
  improvement                                                      Float?
  createdAt                                                        DateTime  @default(now())
  createdBy                                                        String    @default("system")
  tbl_query_plan_tbl_query_plan_comparison_planAIdTotbl_query_plan QueryPlan @relation("tbl_query_plan_comparison_planAIdTotbl_query_plan", fields: [planAId], references: [id], onDelete: Cascade)
  tbl_query_plan_tbl_query_plan_comparison_planBIdTotbl_query_plan QueryPlan @relation("tbl_query_plan_comparison_planBIdTotbl_query_plan", fields: [planBId], references: [id], onDelete: Cascade)

  @@index([planAId], map: "tbl_query_plan_comparison_planAId_fkey")
  @@index([planBId], map: "tbl_query_plan_comparison_planBId_fkey")
  @@map("tbl_query_plan_comparison")
}

model QueryPlanHistory {
  id           String   @id @default(uuid())
  dataSourceId String
  sql          String   @db.Text
  planData     String   @db.Text
  createdAt    DateTime @default(now())

  @@map("tbl_query_plan_history")
}

model SavedQuery {
  id               String       @id @default(uuid())
  name             String
  description      String?      @db.Text
  sql              String       @db.Text
  dataSourceId     String
  tags             String
  folderId         String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  dataSource       DataSource   @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)
  tbl_query_folder QueryFolder? @relation(fields: [folderId], references: [id])

  @@index([dataSourceId], map: "tbl_saved_query_dataSourceId_fkey")
  @@index([folderId], map: "tbl_saved_query_folderId_fkey")
  @@map("tbl_saved_query")
}

model QueryFolder {
  id              String        @id @default(uuid())
  name            String
  description     String?       @db.Text
  parentId        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  parent          QueryFolder?  @relation("FolderTree", fields: [parentId], references: [id])
  children        QueryFolder[] @relation("FolderTree")
  tbl_saved_query SavedQuery[]

  @@index([parentId], map: "tbl_query_folder_parentId_fkey")
  @@map("tbl_query_folder")
}

model QueryFavorite {
  id        String   @id @default(uuid())
  queryId   String
  userId    String   @default("anonymous")
  createdAt DateTime @default(now())

  @@map("tbl_query_favorite")
}

model Integration {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  queryId     String
  type        String
  config      Json
  status      String   @default("DRAFT")
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  createdBy   String?
  updatedBy   String?
  query       Query    @relation(fields: [queryId], references: [id], onDelete: Cascade)

  @@index([queryId], map: "tbl_integration_queryId_fkey")
  @@map("tbl_integration")
}

model Metadata {
  id           String   @id @default(uuid())
  dataSourceId String
  structure    String   @db.LongText
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("tbl_metadata")
}

model QueryVersion {
  id            String   @id @default(uuid())
  queryId       String
  versionNumber Int
  versionStatus String   @default("DRAFT")
  sqlContent    String   @db.Text
  dataSourceId  String
  description   String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String   @default("system")
  query         Query    @relation(fields: [queryId], references: [id], onDelete: Cascade)

  @@index([queryId], map: "tbl_query_version_queryId_fkey")
  @@map("tbl_query_version")
}

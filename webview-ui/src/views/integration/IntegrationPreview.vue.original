<script setup lang="ts">
import { ref, reactive, computed, onMounted } from 'vue';
import { useRoute, useRouter } from 'vue-router';
import { useIntegrationStore } from '@/stores/integration';
import { useMessageStore } from '@/stores/message';
import { storeToRefs } from 'pinia';
import type { Integration, FormConfig, TableConfig, FormCondition } from '@/types/integration';

// 路由相关
const route = useRoute();
const router = useRouter();
const integrationId = computed(() => route.params.id as string);

// Store
const integrationStore = useIntegrationStore();
const message = useMessageStore();
const { loading } = storeToRefs(integrationStore);

// 状态
const integration = ref<Integration | null>(null);
const formValues = ref<Record<string, any>>({});
const showSuccessMessage = ref(false);
const successMessage = ref('');
const showErrorMessage = ref(false);
const errorMessage = ref('');
const tableData = ref<any[]>([]);
const tableLoading = ref(false);
const currentPage = ref(1);
const pageSize = ref(10);
const totalRows = ref(0);
const formErrors = ref<Record<string, string>>({});

// 添加预览模式变量
const previewMode = ref('lowcode'); // 'standard' or 'lowcode'

// 计算属性
const renderedFormConditions = computed(() => {
  if (!integration.value || 
      (integration.value.type !== 'SIMPLE_TABLE' && integration.value.type !== 'TABLE') || 
      !integration.value.tableConfig) {
    return [];
  }
  
  // 从查询参数中获取条件
  if (integration.value.queryParams && integration.value.queryParams.length > 0) {
    console.log('标准模式查询条件数量:', integration.value.queryParams.length);
    return integration.value.queryParams
      .filter(param => param.description && param.description.trim() !== '')
      .map(param => {
        // 确保每个条件都有正确的类型和格式信息
        return {
          ...param,
          // 确保type字段存在，优先使用正确的类型
          type: param.formType || param.type || 'STRING',
          // 确保其他必要字段存在
          required: typeof param.required === 'boolean' ? param.required : false,
          displayOrder: param.displayOrder || 0
        };
      })
    .sort((a, b) => a.displayOrder - b.displayOrder);
  }
  
  return [];
});

const formLayout = computed(() => {
  if (!integration.value || 
      (integration.value.type !== 'SIMPLE_TABLE' && integration.value.type !== 'TABLE') || 
      !integration.value.tableConfig) {
    return 'grid';
  }
  
  return 'grid'; // 使用网格布局
});

const formClasses = computed(() => {
  // 根据模式决定表单的布局样式
  if (previewMode.value === 'lowcode') {
    return 'grid gap-4';  // 低代码模式使用简单网格
  } else {
    // 标准模式使用三列网格
    return 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4';
  }
});

const formLabelClasses = computed(() => {
  if (formLayout.value === 'horizontal') {
    return 'block text-sm font-medium text-gray-700 mb-1';
  } else {
    return 'block text-sm font-medium text-gray-700 mb-1';
  }
});

const tableColumns = computed(() => {
  if (!integration.value || (integration.value.type !== 'SIMPLE_TABLE' && integration.value.type !== 'TABLE') || !integration.value.tableConfig) {
    return [];
  }
  
  return integration.value.tableConfig.columns
    .filter(column => column.visible)
    .sort((a, b) => a.displayOrder - b.displayOrder);
});

const tableActions = computed(() => {
  if (!integration.value || (integration.value.type !== 'SIMPLE_TABLE' && integration.value.type !== 'TABLE') || !integration.value.tableConfig) {
    return [];
  }
  
  return integration.value.tableConfig.actions || [];
});

const pagination = computed(() => {
  if (!integration.value || (integration.value.type !== 'SIMPLE_TABLE' && integration.value.type !== 'TABLE') || !integration.value.tableConfig) {
    return {
      enabled: true,
      pageSize: 10,
      pageSizeOptions: [10, 20, 50, 100]
    };
  }
  
  return integration.value.tableConfig.pagination;
});

const exportConfig = computed(() => {
  if (!integration.value || integration.value.type !== 'TABLE' || !integration.value.tableConfig) {
    return {
      enabled: true,
      formats: ['CSV', 'EXCEL'],
      maxRows: 1000
    };
  }
  
  return integration.value.tableConfig.export;
});

// 生命周期钩子
onMounted(async () => {
  if (integrationId.value) {
    await loadIntegration();
  }
});

// 加载集成
const loadIntegration = async () => {
  loading.value = true;
  
  try {
    const result = await integrationStore.fetchIntegrationById(integrationId.value);
    
    if (result) {
      integration.value = result;
      
      // 初始化表单值
      if (integration.value && (integration.value.type === 'SIMPLE_TABLE' || integration.value.type === 'TABLE')) {
        initFormValues(integration.value.queryParams);
      } else if (integration.value && integration.value.type === 'CHART') {
        // 图表类型的处理
        console.log('图表集成预览');
      }
      
      // 加载表格数据
      if (integration.value && 
          (integration.value.type === 'SIMPLE_TABLE' || integration.value.type === 'TABLE') && 
          integration.value.tableConfig) {
        loadTableData();
      }
    } else {
      message.error('获取集成信息失败');
    }
  } catch (error) {
    console.error('加载集成数据失败', error);
    message.error('加载集成数据失败');
  } finally {
    loading.value = false;
  }
};

// 初始化表单值
const initFormValues = (params?: any[]) => {
  formValues.value = {};
  formErrors.value = {};
  
  if (!params) return;
  
  params.forEach(param => {
    // 根据不同类型设置合适的默认值
    let defaultValue = param.defaultValue || '';
    
    // 根据类型处理默认值
    if (param.formType === 'date' || param.type === 'DATE' || param.type === 'date') {
      // 如果默认值为空，且有设置当前日期为默认值的选项
      if (!defaultValue && param.useCurrentDate) {
        defaultValue = new Date().toISOString().split('T')[0];
      }
    } else if (param.formType === 'datetime' || param.type === 'DATETIME' || param.type === 'datetime') {
      // 处理日期时间类型
      if (!defaultValue && param.useCurrentDate) {
        defaultValue = new Date().toISOString().slice(0, 16);
      }
    } else if (param.formType === 'number' || param.type === 'NUMBER' || param.type === 'number') {
      // 数字类型默认值处理
      defaultValue = defaultValue === '' ? '' : Number(defaultValue);
    } else if (param.formType === 'checkbox' || param.formType === 'boolean' || 
               param.type === 'BOOLEAN' || param.type === 'boolean') {
      // 布尔类型转换
      defaultValue = defaultValue === true || defaultValue === 'true';
    }
    
    formValues.value[param.name] = defaultValue;
    formErrors.value[param.name] = '';
  });
};

// 加载表格数据
const loadTableData = () => {
  if (!integration.value || 
      (integration.value.type !== 'SIMPLE_TABLE' && integration.value.type !== 'TABLE') || 
      !integration.value.tableConfig) {
    return;
  }
  
  // 模拟数据加载，实际应该是从API获取
  tableLoading.value = true;
  
  setTimeout(() => {
    // 生成模拟销售数据，与查询条件匹配
    const mockData = [];
    
    // 产品相关数据
    const productNames = ['笔记本电脑', '智能手机', '平板电脑', '智能手表', '无线耳机', '蓝牙音箱', '电视', '相机', '打印机', '路由器'];
    const productCategories = ['电子产品', '办公设备', '家用电器', '智能设备', '数码配件'];
    
    for (let i = 0; i < 50; i++) {
      const row: Record<string, any> = {
        id: i + 1,
        productId: `产品编号_${i + 1}`,
        productName: `${productNames[Math.floor(Math.random() * productNames.length)]}_${i + 1}`,
        category: productCategories[Math.floor(Math.random() * productCategories.length)],
        salesAmount: 1000 + Math.floor(Math.random() * 10000),
        salesDate: new Date(2023, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1).toISOString().split('T')[0]
      };
      
      // 为表格中的每个字段添加数据
      tableColumns.value.forEach(column => {
        if (column.field && !(column.field in row)) {
          if (column.type === 'number') {
            row[column.field] = Math.floor(Math.random() * 1000);
          } else if (column.type === 'date') {
            const date = new Date();
            date.setDate(date.getDate() - Math.floor(Math.random() * 365));
            row[column.field] = date.toISOString().split('T')[0];
          } else {
            row[column.field] = `${column.label || column.field}_${i + 1}`;
          }
        }
      });
      
      mockData.push(row);
    }
    
    tableData.value = mockData;
    totalRows.value = mockData.length;
    
    tableLoading.value = false;
  }, 1000);
};

// 提交表单
const submitForm = async () => {
  if (!integration.value) return;
  
  // 表单验证
  const hasErrors = validateForm();
  if (hasErrors) {
    message.error('请完善表单信息');
    return;
  }
  
  // 调用集成点
  if (integration.value.integrationPoint) {
    await callIntegrationPoint();
  } else {
    // 如果没有集成点，则直接显示成功消息
    showSuccessMessage.value = true;
    successMessage.value = '表单提交成功';
    
    // 3秒后自动隐藏
    setTimeout(() => {
      showSuccessMessage.value = false;
    }, 3000);
  }
};

// 表单验证
const validateForm = (): boolean => {
  if (!integration.value || 
      (integration.value.type !== 'SIMPLE_TABLE' && integration.value.type !== 'TABLE') || 
      !integration.value.queryParams) {
    return false;
  }
  
  let hasErrors = false;
  
  // 检查必填字段
  integration.value.queryParams.forEach(param => {
    if (param.required && (!formValues.value[param.name] || 
        (typeof formValues.value[param.name] === 'string' && formValues.value[param.name].trim() === ''))) {
      hasErrors = true;
      formErrors.value[param.name] = `${param.description}不能为空`;
    } else {
      formErrors.value[param.name] = '';
    }
  });
  
  return !hasErrors;
};

// 调用集成点
const callIntegrationPoint = async () => {
  if (!integration.value || !integration.value.integrationPoint) return;
  
  try {
    const integrationPoint = integration.value.integrationPoint;
    
    if (integrationPoint.type === 'URL' && integrationPoint.urlConfig) {
      // 调用URL集成点
      const response = await integrationStore.callUrlIntegrationPoint(
        integrationPoint.urlConfig.url,
        integrationPoint.urlConfig.method,
        formValues.value,
        integrationPoint.urlConfig.headers
      );
      
      if (response && response.success) {
        showSuccessMessage.value = true;
        successMessage.value = response.message || '操作成功';
      } else {
        showErrorMessage.value = true;
        errorMessage.value = response.message || '操作失败';
      }
    } else if (integrationPoint.type === 'FORM_SUBMIT' && integrationPoint.formSubmitConfig) {
      // 调用表单提交集成点
      const response = await integrationStore.callFormSubmitIntegrationPoint(
        integrationPoint.formSubmitConfig.formId,
        integrationPoint.formSubmitConfig.submitAction,
        formValues.value
      );
      
      if (response && response.success) {
        showSuccessMessage.value = true;
        successMessage.value = integrationPoint.formSubmitConfig.successMessage || '提交成功';
      } else {
        showErrorMessage.value = true;
        errorMessage.value = integrationPoint.formSubmitConfig.errorMessage || '提交失败';
      }
    }
    
    // 3秒后自动隐藏消息
    setTimeout(() => {
      showSuccessMessage.value = false;
      showErrorMessage.value = false;
    }, 3000);
  } catch (error) {
    console.error('调用集成点失败', error);
    showErrorMessage.value = true;
    errorMessage.value = '调用集成点失败';
    
    // 3秒后自动隐藏错误消息
    setTimeout(() => {
      showErrorMessage.value = false;
    }, 3000);
  }
};

// 重置表单
const resetForm = () => {
  if (!integration.value || 
      (integration.value.type !== 'SIMPLE_TABLE' && integration.value.type !== 'TABLE') || 
      !integration.value.queryParams) return;
  
  initFormValues(integration.value.queryParams);
};

// 处理表格操作
const handleTableAction = (action: any, row: any) => {
  console.log('表格操作:', action, row);
  
  if (action.handler) {
    try {
      // 动态执行处理函数
      const fn = new Function('row', `return ${action.handler}(row)`);
      fn(row);
    } catch (error) {
      console.error('执行操作处理函数失败', error);
      message.error('执行操作失败');
    }
  }
};

// 处理页码变更
const changePage = (page: number) => {
  currentPage.value = page;
};

// 处理每页条数变更
const handlePageSizeChange = (event: Event) => {
  const target = event.target as HTMLSelectElement;
  if (target && target.value) {
    pageSize.value = parseInt(target.value, 10);
  currentPage.value = 1;
  }
};

// 计算当前页显示的数据
const displayedTableData = computed(() => {
  const startIndex = (currentPage.value - 1) * pageSize.value;
  const endIndex = startIndex + pageSize.value;
  return tableData.value.slice(startIndex, endIndex);
});

// 计算总页数
const totalPages = computed(() => {
  return Math.ceil(tableData.value.length / pageSize.value);
});

// 计算显示的页码列表
const paginationPages = computed(() => {
  const result = [];
  const maxPages = 5;
  
  if (totalPages.value <= maxPages) {
    // 如果总页数小于等于最大显示页数，则全部显示
    for (let i = 1; i <= totalPages.value; i++) {
      result.push(i);
    }
  } else {
    // 根据当前页码计算显示范围
    let startPage = Math.max(1, currentPage.value - Math.floor(maxPages / 2));
    let endPage = startPage + maxPages - 1;
    
    if (endPage > totalPages.value) {
      endPage = totalPages.value;
      startPage = Math.max(1, endPage - maxPages + 1);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      result.push(i);
    }
  }
  
  return result;
});

// 导出表格数据
const exportTable = (format: string) => {
  if (!integration.value) return;
  
  message.info(`正在导出${format === 'CSV' ? 'CSV' : 'Excel'}文件...`);
  
  // 实际导出逻辑
  // ...
};

// 获取字段对齐样式
const getColumnAlignClass = (align: string): string => {
  switch (align) {
    case 'center':
      return 'text-center';
    case 'right':
      return 'text-right';
    default:
      return 'text-left';
  }
};

// 返回编辑页面
const goToEdit = () => {
  if (!integration.value) return;
  
  router.push(`/integration/edit/${integration.value.id}`);
};

// 返回列表页面
const goToList = () => {
  router.push('/integration');
};

// 切换预览模式
const switchPreviewMode = (mode: string) => {
  previewMode.value = mode;
};
</script>

<template>
  <div class="container mx-auto px-4 py-6 min-h-screen">
    <div class="page-header mb-6">
      <div class="flex justify-between items-center">
        <h1 class="text-2xl font-bold text-gray-900">
          预览集成
        </h1>
        <div class="flex space-x-2">
          <button 
            @click="goToList"
            class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            <i class="fas fa-arrow-left mr-2"></i>
            返回列表
          </button>
          <button 
            @click="goToEdit"
            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            <i class="fas fa-edit mr-2"></i>
            编辑集成
          </button>
        </div>
      </div>
    </div>
    
    <!-- 加载中 -->
    <div v-if="loading" class="bg-white shadow rounded-lg p-10 text-center">
      <i class="fas fa-circle-notch fa-spin text-indigo-500 text-3xl mb-4"></i>
      <p class="text-gray-500">正在加载集成数据...</p>
    </div>
    
    <!-- 集成信息 -->
    <div v-else-if="integration" class="bg-white shadow rounded-lg overflow-hidden">
      <!-- 集成头部信息 -->
      <div class="bg-gray-50 p-4 border-b border-gray-200">
        <div class="flex items-center">
          <h2 class="text-lg font-medium text-gray-900 flex-1">{{ integration.name }}</h2>
          <span 
            :class="[
              'px-2 py-1 text-xs font-semibold rounded-full',
              integration.status === 'ACTIVE' ? 'bg-green-100 text-green-800' :
              integration.status === 'INACTIVE' ? 'bg-gray-100 text-gray-800' :
              'bg-yellow-100 text-yellow-800'
            ]"
          >
            {{ integration.status === 'ACTIVE' ? '已激活' : 
               integration.status === 'INACTIVE' ? '已停用' : '草稿' }}
          </span>
        </div>
        <p v-if="integration.description" class="mt-1 text-sm text-gray-500">
          {{ integration.description }}
        </p>
      </div>
      
      <!-- 预览模式切换选项卡 -->
      <div class="border-b border-gray-200">
        <nav class="flex -mb-px" aria-label="Tabs">
          <button 
            @click="switchPreviewMode('lowcode')" 
            :class="[
              'w-1/2 py-4 px-1 text-center border-b-2 font-medium text-sm',
              previewMode === 'lowcode' 
                ? 'border-indigo-500 text-indigo-600' 
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            ]"
          >
            <i class="fas fa-code mr-2"></i>
            低代码预览
          </button>
          <button 
            @click="switchPreviewMode('standard')" 
            :class="[
              'w-1/2 py-4 px-1 text-center border-b-2 font-medium text-sm',
              previewMode === 'standard' 
                ? 'border-indigo-500 text-indigo-600' 
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            ]"
          >
            <i class="fas fa-table mr-2"></i>
            标准预览
          </button>
        </nav>
      </div>
      
      <!-- 低代码预览模式 -->
      <div v-if="previewMode === 'lowcode'" class="p-6">
        <!-- 成功消息和错误消息 -->
        <div v-if="showSuccessMessage" class="mb-4 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded relative" role="alert">
          <span class="block sm:inline">{{ successMessage }}</span>
        </div>
        <div v-if="showErrorMessage" class="mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert">
          <span class="block sm:inline">{{ errorMessage }}</span>
        </div>

        <!-- 低代码表格预览 -->
        <div v-if="integration.type === 'SIMPLE_TABLE' || integration.type === 'TABLE'">
          <!-- 查询条件展示 -->
          <div v-if="renderedFormConditions.length > 0" class="mb-8">
            <h3 class="text-lg font-medium text-gray-900 mb-4">查询条件</h3>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 bg-gray-50 rounded-lg border border-gray-200 p-4">
              <div v-for="condition in renderedFormConditions" :key="condition.name" class="flex flex-col">
                <span class="text-sm font-medium text-gray-700 mb-1">{{ condition.description }}</span>
                <div class="bg-white px-3 py-2 border border-gray-300 rounded-md text-sm text-gray-700">
                  {{ formValues[condition.name] || '未设置' }}
                </div>
              </div>
            </div>

            <!-- 简化的查询按钮 -->
            <div class="mt-4 flex justify-end">
              <button 
                @click="submitForm"
                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none"
              >
                <i class="fas fa-search mr-2"></i>
                查询数据
              </button>
            </div>
          </div>

          <!-- 表格数据展示 -->
          <div>
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-lg font-medium text-gray-900">数据列表</h3>
              
              <!-- 导出按钮 -->
              <div v-if="exportConfig.enabled" class="relative inline-block text-left">
                <button type="button" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none">
                  <i class="fas fa-file-export mr-2"></i>
                  导出数据
                </button>
              </div>
            </div>

            <!-- 表格容器 -->
            <div class="overflow-x-auto bg-white border border-gray-200 rounded-lg shadow">
              <!-- 加载中 -->
              <div v-if="tableLoading" class="p-10 text-center">
                <i class="fas fa-circle-notch fa-spin text-indigo-500 text-3xl mb-4"></i>
                <p class="text-gray-500">正在加载数据...</p>
              </div>
              
              <!-- 空状态 -->
              <div v-else-if="tableData.length === 0" class="p-10 text-center">
                <div class="rounded-full bg-gray-100 h-16 w-16 flex items-center justify-center mx-auto mb-4">
                  <i class="fas fa-table text-gray-400 text-2xl"></i>
                </div>
                <h3 class="text-sm font-medium text-gray-900">暂无数据</h3>
                <p class="mt-1 text-sm text-gray-500">当前查询没有返回任何数据</p>
              </div>
              
              <!-- 数据表格 - 简化版 -->
              <table v-else class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                  <tr>
                    <th 
                      v-for="column in tableColumns" 
                      :key="column.field"
                      :class="[
                        'px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider',
                        getColumnAlignClass(column.align)
                      ]"
                    >
                      {{ column.label }}
                    </th>
                    <th v-if="tableActions.length > 0" scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      操作
                    </th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  <tr v-for="(row, rowIndex) in displayedTableData" :key="rowIndex">
                    <td 
                      v-for="column in tableColumns" 
                      :key="column.field"
                      :class="[
                        'px-6 py-4 whitespace-nowrap text-sm',
                        getColumnAlignClass(column.align)
                      ]"
                    >
                      {{ row[column.field] }}
                    </td>
                    <td v-if="tableActions.length > 0" class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <a v-for="action in tableActions" :key="action.label" href="#" 
                        class="text-indigo-600 hover:text-indigo-900 ml-3"
                        @click.prevent="handleTableAction(action, row)">
                        {{ action.label }}
                      </a>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
            
            <!-- 简化的分页控件 -->
            <div v-if="pagination.enabled && totalRows > 0" class="mt-4 flex items-center justify-between border-t border-gray-200 pt-4">
              <p class="text-sm text-gray-700">
                显示 {{ (currentPage - 1) * pageSize + 1 }}-{{ Math.min(currentPage * pageSize, totalRows) }} 条，共 {{ totalRows }} 条
              </p>
              <div class="flex space-x-2">
                <button 
                  @click="changePage(currentPage - 1)" 
                  :disabled="currentPage === 1"
                  class="inline-flex items-center px-3 py-1 border border-gray-300 rounded-md text-sm font-medium bg-white"
                  :class="currentPage === 1 ? 'text-gray-300 cursor-not-allowed' : 'text-gray-700 hover:bg-gray-50'"
                >
                  <i class="fas fa-chevron-left mr-1"></i> 上一页
                </button>
                <button 
                  @click="changePage(currentPage + 1)" 
                  :disabled="currentPage === totalPages"
                  class="inline-flex items-center px-3 py-1 border border-gray-300 rounded-md text-sm font-medium bg-white"
                  :class="currentPage === totalPages ? 'text-gray-300 cursor-not-allowed' : 'text-gray-700 hover:bg-gray-50'"
                >
                  下一页 <i class="fas fa-chevron-right ml-1"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
        
        <!-- 低代码图表预览 -->
        <div v-else-if="integration.type === 'CHART'" class="p-6">
          <h3 class="text-lg font-medium text-gray-900 mb-4">图表视图</h3>
          <div class="h-80 border border-gray-200 rounded-lg bg-gray-50 flex items-center justify-center">
            <div class="text-center">
              <i class="fas fa-chart-bar text-gray-400 text-4xl mb-3"></i>
              <p class="text-gray-500">图表功能即将上线...</p>
            </div>
          </div>
        </div>
        
        <!-- 低代码未知类型集成 -->
        <div v-else class="p-6 text-center">
          <i class="fas fa-exclamation-circle text-yellow-500 text-4xl mb-3"></i>
          <h3 class="text-lg font-medium text-gray-900 mb-2">未知集成类型</h3>
          <p class="text-gray-500">
            该集成类型 ({{ integration.type }}) 暂不支持低代码预览
          </p>
        </div>
      </div>
      
      <!-- 标准预览模式 - 现有内容 -->
      <div v-else class="p-6">
        <!-- 成功消息 -->
        <div v-if="showSuccessMessage" class="mb-4 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded relative" role="alert">
          <span class="block sm:inline">{{ successMessage }}</span>
        </div>
        
        <!-- 错误消息 -->
        <div v-if="showErrorMessage" class="mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded relative" role="alert">
          <span class="block sm:inline">{{ errorMessage }}</span>
        </div>
        
        <!-- 查询表单部分 - 针对SIMPLE_TABLE和TABLE类型 -->
        <div v-if="integration.type === 'SIMPLE_TABLE' || integration.type === 'TABLE'">
          <!-- 查询表单 -->
          <form @submit.prevent="submitForm" v-if="renderedFormConditions.length > 0" class="mb-8">
            <h3 class="text-lg font-medium text-gray-900 mb-4">查询条件</h3>
          <div :class="formClasses">
              <div v-for="condition in renderedFormConditions" :key="condition.name" class="mb-4">
                <label :for="condition.name" :class="formLabelClasses">
                  {{ condition.description }}
                  <span v-if="condition.required" class="text-red-500">*</span>
                </label>
                
                <!-- 文本输入框 -->
                <input 
                  v-if="condition.formType === 'text' || condition.formType === 'input' || 
                      (!condition.formType && (condition.type === 'STRING' || condition.type === 'string'))"
                  :id="condition.name"
                  v-model="formValues[condition.name]"
                  type="text"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  :required="condition.required"
                  :placeholder="condition.description"
                />
                
                <!-- 数字输入框 -->
                <input 
                  v-else-if="condition.formType === 'number' || 
                          (!condition.formType && (condition.type === 'NUMBER' || condition.type === 'number'))"
                  :id="condition.name"
                  v-model="formValues[condition.name]"
                  type="number"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  :required="condition.required"
                  :placeholder="condition.description"
                  :min="condition.min"
                  :max="condition.max"
                  :step="condition.step || 1"
                />
                
                <!-- 日期选择器 -->
                <input 
                  v-else-if="condition.formType === 'date' || 
                          (!condition.formType && (condition.type === 'DATE' || condition.type === 'date'))"
                  :id="condition.name"
                  v-model="formValues[condition.name]"
                  type="date"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  :required="condition.required"
                />
                
                <!-- 日期时间选择器 -->
                <input 
                  v-else-if="condition.formType === 'datetime' || condition.formType === 'datetime-local' || 
                          (!condition.formType && (condition.type === 'DATETIME' || condition.type === 'datetime'))"
                  :id="condition.name"
                  v-model="formValues[condition.name]"
                  type="datetime-local"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  :required="condition.required"
                />
                
                <!-- 下拉选择框 -->
                <select
                  v-else-if="condition.formType === 'select' || condition.format === 'enum' ||
                          (!condition.formType && condition.type === 'SELECT')"
                  :id="condition.name"
                  v-model="formValues[condition.name]"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  :required="condition.required"
                >
                  <option value="">请选择</option>
                  <option 
                    v-for="option in condition.options" 
                    :key="option.value" 
                    :value="option.value"
                  >
                    {{ option.label }}
                  </option>
                </select>
                
                <!-- 复选框 -->
                <div v-else-if="condition.formType === 'checkbox' || condition.formType === 'boolean' ||
                              (!condition.formType && (condition.type === 'BOOLEAN' || condition.type === 'boolean'))" class="flex items-center mt-1">
                  <input 
                    :id="condition.name"
                    v-model="formValues[condition.name]"
                    type="checkbox"
                    class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
                    :required="condition.required"
                  />
                  <label :for="condition.name" class="ml-2 text-sm text-gray-500">
                    {{ condition.description }}
                  </label>
                </div>
                
                <!-- 文本区域 -->
                <textarea 
                  v-else-if="condition.formType === 'textarea' || 
                          (!condition.formType && (condition.type === 'TEXT' || condition.type === 'text'))"
                  :id="condition.name"
                  v-model="formValues[condition.name]"
                  rows="3"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  :required="condition.required"
                  :placeholder="condition.description"
                ></textarea>
                
                <!-- 默认文本输入框 -->
                <input 
                  v-else
                  :id="condition.name"
                  v-model="formValues[condition.name]"
                  type="text"
                  class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  :required="condition.required"
                  :placeholder="condition.description"
                />
                
                <!-- 表单项错误提示 -->
                <p v-if="formErrors[condition.name]" class="mt-1 text-sm text-red-600">
                  {{ formErrors[condition.name] }}
                </p>
              </div>
          </div>
          
          <!-- 表单按钮 -->
          <div class="mt-6 flex justify-end space-x-3">
            <button 
              type="button"
              @click="resetForm"
              class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
                重置
            </button>
            <button 
              type="submit"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
                查询
            </button>
          </div>
        </form>
      
          <!-- 表格数据部分 -->
          <div>
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-lg font-medium text-gray-900">数据列表</h3>
              
            <!-- 导出按钮 -->
            <div v-if="exportConfig.enabled" class="relative inline-block text-left">
              <div>
                  <button type="button" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                  <i class="fas fa-file-export mr-2"></i>
                  导出
                  <i class="fas fa-chevron-down ml-2"></i>
                </button>
              </div>
              
                <div class="origin-top-right absolute right-0 mt-2 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10" role="menu" aria-orientation="vertical">
                <div class="py-1" role="none">
                    <a v-if="exportConfig.formats?.includes('CSV')" href="#" @click.prevent="exportTable('CSV')" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900" role="menuitem">导出为CSV</a>
                    <a v-if="exportConfig.formats?.includes('EXCEL')" href="#" @click.prevent="exportTable('EXCEL')" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900" role="menuitem">导出为Excel</a>
                </div>
              </div>
            </div>
          </div>
          
            <!-- 表格容器 -->
        <div class="overflow-x-auto bg-white border border-gray-200 rounded-md">
          <!-- 加载中 -->
          <div v-if="tableLoading" class="p-10 text-center">
            <i class="fas fa-circle-notch fa-spin text-indigo-500 text-3xl mb-4"></i>
            <p class="text-gray-500">正在加载数据...</p>
          </div>
          
          <!-- 空状态 -->
          <div v-else-if="tableData.length === 0" class="p-10 text-center">
            <div class="rounded-full bg-gray-100 h-16 w-16 flex items-center justify-center mx-auto mb-4">
              <i class="fas fa-table text-gray-400 text-2xl"></i>
            </div>
            <h3 class="text-sm font-medium text-gray-900">暂无数据</h3>
                <p class="mt-1 text-sm text-gray-500">当前查询没有返回任何数据</p>
          </div>
          
          <!-- 数据表格 -->
          <table v-else class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th 
                  v-for="column in tableColumns" 
                  :key="column.field"
                  :class="[
                    'px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider',
                    getColumnAlignClass(column.align)
                  ]"
                >
                  {{ column.label }}
                </th>
                <th v-if="tableActions.length > 0" scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  操作
                </th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                  <tr v-for="(row, rowIndex) in displayedTableData" :key="rowIndex">
                <td 
                  v-for="column in tableColumns" 
                  :key="column.field"
                  :class="[
                    'px-6 py-4 whitespace-nowrap text-sm',
                    getColumnAlignClass(column.align)
                  ]"
                >
                  {{ row[column.field] }}
                </td>
                <td v-if="tableActions.length > 0" class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <button 
                    v-for="action in tableActions" 
                    :key="action.label"
                    @click="handleTableAction(action, row)"
                    :class="[
                      'mx-1',
                      action.style === 'primary' ? 'text-indigo-600 hover:text-indigo-900' :
                      action.style === 'danger' ? 'text-red-600 hover:text-red-900' :
                      'text-gray-600 hover:text-gray-900'
                    ]"
                    :title="action.label"
                  >
                    <i v-if="action.icon" :class="action.icon"></i>
                    <span v-else>{{ action.label }}</span>
                  </button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
        
        <!-- 分页 -->
        <div v-if="pagination.enabled && totalRows > 0" class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4">
          <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p class="text-sm text-gray-700">
                显示
                <span class="font-medium">{{ (currentPage - 1) * pageSize + 1 }}</span>
                至
                <span class="font-medium">{{ Math.min(currentPage * pageSize, totalRows) }}</span>
                条，共
                <span class="font-medium">{{ totalRows }}</span>
                条记录
              </p>
            </div>
            <div>
              <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                <!-- 上一页 -->
                <button
                      @click="changePage(currentPage - 1)"
                  :disabled="currentPage === 1"
                  :class="[
                    'relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium',
                    currentPage === 1 ? 'text-gray-300 cursor-not-allowed' : 'text-gray-500 hover:bg-gray-50'
                  ]"
                >
                  <i class="fas fa-chevron-left"></i>
                </button>
                
                <!-- 页码 -->
                    <template v-for="page in paginationPages" :key="page">
                  <button
                        @click="changePage(page)"
                    :class="[
                      'relative inline-flex items-center px-4 py-2 border',
                      page === currentPage
                        ? 'bg-indigo-50 border-indigo-500 text-indigo-600 z-10'
                        : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                    ]"
                  >
                    {{ page }}
                  </button>
                </template>
                
                <!-- 下一页 -->
                <button
                      @click="changePage(currentPage + 1)"
                      :disabled="currentPage === totalPages"
                  :class="[
                    'relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium',
                        currentPage === totalPages ? 'text-gray-300 cursor-not-allowed' : 'text-gray-500 hover:bg-gray-50'
                  ]"
                >
                  <i class="fas fa-chevron-right"></i>
                </button>
              </nav>
            </div>
          </div>
            </div>
          </div>
        </div>
        
        <!-- 图表类型集成 -->
        <div v-else-if="integration.type === 'CHART'" class="mt-4">
          <h3 class="text-lg font-medium text-gray-900 mb-4">图表视图</h3>
          <div class="h-80 border border-gray-200 rounded-md bg-gray-50 flex items-center justify-center">
            <p class="text-gray-500">图表功能即将上线...</p>
          </div>
        </div>
        
        <!-- 未知类型集成 -->
        <div v-else class="mt-4 text-center py-8">
          <h3 class="text-lg font-medium text-gray-900 mb-2">未知集成类型</h3>
          <p class="text-gray-500">
            该集成类型 ({{ integration.type }}) 暂不支持预览
          </p>
        </div>
      </div>
    </div>
  </div>
</template>